/* 

Aluno: Thiago Oliveira Azevedo de Carvalho             Matrícula: 2021200457
Disciplina: Programação Estruturada                    Turma: 931
Professor: Sérgio Assunção Monteiro

Atividade Prática Supervisionada (APS)

*/

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <locale.h>
#define N 10

void processamento(int v[]);

void saida_dados(int v[]);

int somar_pares(int v[]);

int somar_pares_recursivos(int q, int v[]);

int eh_par(int n);

int maior_soma (int v1, int v2, int v3, int v4, int v5);

int main (void) {
	
	  int soma_par_v1, vetor1 [N];
	  
	  int soma_par_v2, vetor2 [N];
	  
	  int soma_par_v3, vetor3 [N];
	  
	  int soma_par_v4, vetor4 [N];
	  
	  int soma_par_v5, vetor5 [N];
	  
	  int maior;

 	setlocale (LC_ALL, "Portuguese");
  
  	printf ( "================= VETOR 1 =================\n" );
	
	processamento ( vetor1 );
	
	saida_dados( vetor1 );
	
	soma_par_v1 = somar_pares_recursivos( N - 1, vetor1 );
	
	printf("\n\n A soma dos pares acima é: %i\n", soma_par_v1 );
	
	printf ("\n");
	  
	printf ( "================= VETOR 2 =================\n" );
	
	processamento ( vetor2 );
	
	saida_dados ( vetor2 );
	
	soma_par_v2 = somar_pares_recursivos( N - 1, vetor2 );
	
	printf("\n\n A soma dos pares acima é: %i\n", soma_par_v2 );
	
	printf ("\n");
	   
	printf ( "================= VETOR 3 =================\n" );
	
	processamento ( vetor3 );
	
	saida_dados ( vetor3 );
	
	soma_par_v3 = somar_pares_recursivos( N - 1, vetor3 );
	
	printf("\n\n A soma dos pares acima é: %i\n", soma_par_v3 );
	
	printf ("\n");
	
	printf ( "================= VETOR 4 =================\n" );
	
	processamento ( vetor4 );
	
	saida_dados ( vetor4 );
	
	soma_par_v4 = somar_pares_recursivos( N - 1, vetor4 );
	
	printf("\n\n A soma dos pares acima é: %i\n", soma_par_v4 );
	
	printf ("\n");
	
	printf ( "================= VETOR 5 =================\n" );
	
	processamento ( vetor5 );
	
	saida_dados( vetor5 );
	
	soma_par_v5 = somar_pares_recursivos( N - 1, vetor5 );
	
	printf("\n\n A soma dos números pares acima é: %i\n", soma_par_v5 );
	 	
	printf ("\n Somas totais = [%i] - [%i] - [%i] - [%i] - [%i]\n", soma_par_v1, soma_par_v2, soma_par_v3, soma_par_v4, soma_par_v5);

	maior = maior_soma ( soma_par_v1,soma_par_v2,soma_par_v3, soma_par_v4, soma_par_v5 );
	
	printf ("\n O maior número encontrado: %i", maior);
	
	return(0);
}

int maior_soma ( int v1, int v2, int v3, int v4, int v5 ) {
		
		int maior = 0, i = 1;
		
		while ( i = 1 ) {
			
			if ( v1 > maior ) {
			
			maior = v1;	
			
			}
				
			if ( v2 > maior ) {
			
			maior = v2;	
			
			}
			
			if ( v3 > maior ) {
			
			maior = v3;    
			
			}
		      
		       if ( v4 > maior ) {
		       
			   maior = v4;    
			   
			   }
		      
		       if  ( v5 > maior ) {
		       
			   maior = v5;
			   
			   }
		      
			return maior;
			
			}
		}

void saida_dados ( int v[] ) {
	
	setlocale ( LC_ALL, "Portuguese" );
	
	int i;
	
	for ( i = 0; i < N; i++ )
		
		printf("\nVetor na posição [%i] = %i", i + 1, v[i] );
	
}

void processamento ( int v[] ) {
	
	int i, n;
  	
	  time_t t;
      	
		  n = 5;
      	
      	srand ( ( unsigned ) time( &t ) );
      	
   	for ( i = 0 ; i < N ; i++ ) 
      		
			  v[i] = ( int ) rand () %10;
   	
}

int somar_pares ( int v[] ) {
	
	int i, soma = 0;
	
	for ( i = 0; i < N; i++ ) {
    		
			if ( v[i] %2 == 0 ) {
     			
				 soma = soma + v[i]; 
    		}
		}
	
	return soma;
}

int eh_par ( int n ) {
  	
	  if ( n%2 == 0 ) 
    		
			return 1;  		
  	
	return 0;
}

int somar_pares_recursivos ( int n, int v[] ) {
  
  int resultado;
	
	if ( n == 0 ) 
		
		return eh_par ( v[0] ) ? v[0] : 0;
	  	
	resultado = eh_par ( v[n] ) ? v[n] : 0;
		
		return resultado + somar_pares_recursivos ( n - 1, v );
}
